Sub getInfo()            Dim RowLocation As Long    Dim wsMySheet As Worksheet    Application.ScreenUpdating = False    For Each wsMySheet In ThisWorkbook.Sheets ' loop that goes through all the sheets in the workbook            wsMySheet.Select                      ' Selects the current workSheet                ' Variables        Dim sTickers() As String              ' Saves the id of the tickers        Dim dVolumes() As Double              ' Saves the total volume of each ticker        Dim dChanges() As Double              ' Saves the change of the year        Dim dPercentages() As Double          ' Saves de change of the year in percentage                Dim dPointer1 As Double               ' Generic pointer        Dim dPointer2 As Double               ' Generic pointer        Dim dVolumen As Double                ' Auxiliary variable that stores the total volume for one year        Dim dOpeningPrice As Double           ' Stores the value of the opening price of the year that is being iterated        Dim dGreatestIncrease As Double       '  Stores the value of greatest increase of all tickers        Dim dlowestIncrease As Double         '  Stores the value of lowest increase of all tickers        Dim dGreatestVolume As Double         ' Stores the value of greatest Volume        Dim iTotalData As Double              ' Total number of rows                Dim iGreatestIndex As Integer         ' Stores the index of greatest increase        Dim iLowestIndex As Integer           ' Stores the index of lowest increase        Dim iVolumeIndex As Integer           ' Stores the index of greatest volume        Dim iNumTickers As Integer            ' Total number of diferent tickers        Dim iCounter As Integer               ' Generic counter            ' Formating rows        Dim isPositive As FormatCondition     ' Will turn the cell green if needed        Dim isNegative As FormatCondition     ' Will turn the cell red if needed                    ' Initializing variables        dGreatestVolume = 0        dlowestIncrease = 10000        dGreatestIncrease = 0        dVolumen = 0                dPointer1 = 1                         ' Used to evaluate if the ticker changed        dPointer2 = 1                         ' Used to evaluate if the ticker changed        iCounter = 0                          ' Used to count the number of diferent tickers        iTotalData = 0                        ' Counts the total number of rows used                    ' Obtain the total number of diferent tickers        While Cells(dPointer2, 1) <> ""            If Cells(dPointer1, 1) <> Cells(dPointer2, 1) Then                dPointer1 = dPointer2     ' Move the pointer1 to position p2                iCounter = iCounter + 1   ' Increase the nu,ber of tickers            End If            dPointer2 = dPointer2 + 1            iTotalData = iTotalData + 1        Wend                    iNumTickers = iCounter + 1 ' Store the total number of tickers in a variable                ' Resizing of the Arrays to fit all of the data        ReDim Preserve sTickers(iNumTickers)        ReDim Preserve dVolumes(iNumTickers)        ReDim Preserve dChanges(iNumTickers)        ReDim Preserve dPercentages(iNumTickers)                iCounter = 0        dOpeningPrice = Cells(1, 3)                ' Get Data        For x = 1 To iTotalData            If Cells(x, 1) <> Cells(x + 1, 1) Then                dVolumen = dVolumen + Cells(x, 7)                                dChanges(iCounter) = Cells(x, 6) - dOpeningPrice ' Substracts the ending price with the opening price of each year                sTickers(iCounter) = Cells(x, 1)                 ' Stores the ticker id                dVolumes(iCounter) = dVolumen                    ' Stores the total volume of the year                If dOpeningPrice <> 0 Then                       ' Calculates the change in percentage whenever the opening price is not equal to 0                    dPercentages(iCounter) = (dChanges(iCounter) * 100) / dOpeningPrice                Else                    dPercentages(iCounter) = 1                End If                                dOpeningPrice = Cells(x + 1, 3)   ' Changes the value to correspond each year                iCounter = iCounter + 1                dVolumen = 0            Else                dVolumen = dVolumen + Cells(x, 7) ' Stores the current Volume stock            End If        Next x            iCounter = 2 ' Starting row        ' Display values in xlsx        For x = 0 To iNumTickers - 1                If dVolumes(x) > dGreatestVolume Then           ' Check if for the max volume             dGreatestVolume = dVolumes(x)             iVolumeIndex = x        End If        If dPercentages(x) < dlowestIncrease Then       ' Check if for the lowest increase            dlowestIncrease = dPercentages(x)            iLowestIndex = x        ElseIf dPercentages(x) > dGreatestIncrease Then ' Check if for the greatest increase            dGreatestIncrease = dPercentages(x)            iGreatestIndex = x        End If            Cells(iCounter, 9) = sTickers(x)              ' Storing the value of the ticker ID in column i        Cells(iCounter, 10) = dChanges(x)             ' Storing the value of the yearly Change ID in column j        Cells(iCounter, 11) = dPercentages(x) / 100   ' Storing the value of the percentage change ID in column k        Cells(iCounter, 12) = dVolumes(x)             ' Storing the value of the total volume ID in column l        iCounter = iCounter + 1                       ' Increase the counter to change row                Next x                ' Fixing/Setting the range on which conditional formatting is to be desired        Set Rng = Range("J2", "J" & CStr(iNumTickers + 1))                ' To delete/clear any existing conditional formatting from the range        Rng.FormatConditions.Delete               ' Defining and setting the criteria for each conditional format       Set isPositive = Rng.FormatConditions.Add(xlCellValue, xlGreater, "=0")       Set isNegative = Rng.FormatConditions.Add(xlCellValue, xlLess, "=0")           ' Defining and setting the format to be applied for each condition       With isPositive ' Change the cell to color green        .Interior.Color = vbGreen       End With           With isNegative ' Change the cell to color red         .Interior.Color = vbRed       End With            ' Write greatest values values in xlsx        Cells(2, 15) = sTickers(iGreatestIndex)        Cells(3, 15) = sTickers(iLowestIndex)        Cells(4, 15) = sTickers(iVolumeIndex)        Cells(2, 16) = dPercentages(iGreatestIndex) / 100        Cells(3, 16) = dPercentages(iLowestIndex) / 100        Cells(4, 16) = dVolumes(iVolumeIndex)            Next wsMySheet ' Go to next Sheet in workbook     Application.ScreenUpdating = TrueEnd Sub